// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TermImport } from './routes/term'
import { Route as RewardImport } from './routes/reward'
import { Route as ManageImport } from './routes/manage'
import { Route as DocumentImport } from './routes/document'
import { Route as CartImport } from './routes/cart'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as ProductIndexImport } from './routes/product.index'
import { Route as ManageIndexImport } from './routes/manage.index'
import { Route as UserOrderImport } from './routes/user.order'
import { Route as ProductProductIdImport } from './routes/product.$productId'
import { Route as AuthRegisterImport } from './routes/auth.register'
import { Route as AuthLoginImport } from './routes/auth.login'
import { Route as ManageProductSchedulingdeskImport } from './routes/manage.product.scheduling_desk'
import { Route as ManageProductAdddeskImport } from './routes/manage.product.add_desk'
import { Route as ManageProductViewdeskIndexImport } from './routes/manage.product.view_desk.index'
import { Route as ManageProductViewdeskOrderIdImport } from './routes/manage.product.view_desk.$orderId'

// Create/Update Routes

const TermRoute = TermImport.update({
  path: '/term',
  getParentRoute: () => rootRoute,
} as any)

const RewardRoute = RewardImport.update({
  path: '/reward',
  getParentRoute: () => rootRoute,
} as any)

const ManageRoute = ManageImport.update({
  path: '/manage',
  getParentRoute: () => rootRoute,
} as any)

const DocumentRoute = DocumentImport.update({
  path: '/document',
  getParentRoute: () => rootRoute,
} as any)

const CartRoute = CartImport.update({
  path: '/cart',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProductIndexRoute = ProductIndexImport.update({
  path: '/product/',
  getParentRoute: () => rootRoute,
} as any)

const ManageIndexRoute = ManageIndexImport.update({
  path: '/',
  getParentRoute: () => ManageRoute,
} as any)

const UserOrderRoute = UserOrderImport.update({
  path: '/user/order',
  getParentRoute: () => rootRoute,
} as any)

const ProductProductIdRoute = ProductProductIdImport.update({
  path: '/product/$productId',
  getParentRoute: () => rootRoute,
} as any)

const AuthRegisterRoute = AuthRegisterImport.update({
  path: '/auth/register',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any)

const ManageProductSchedulingdeskRoute =
  ManageProductSchedulingdeskImport.update({
    path: '/product/scheduling_desk',
    getParentRoute: () => ManageRoute,
  } as any)

const ManageProductAdddeskRoute = ManageProductAdddeskImport.update({
  path: '/product/add_desk',
  getParentRoute: () => ManageRoute,
} as any)

const ManageProductViewdeskIndexRoute = ManageProductViewdeskIndexImport.update(
  {
    path: '/product/view_desk/',
    getParentRoute: () => ManageRoute,
  } as any,
)

const ManageProductViewdeskOrderIdRoute =
  ManageProductViewdeskOrderIdImport.update({
    path: '/product/view_desk/$orderId',
    getParentRoute: () => ManageRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/cart': {
      preLoaderRoute: typeof CartImport
      parentRoute: typeof rootRoute
    }
    '/document': {
      preLoaderRoute: typeof DocumentImport
      parentRoute: typeof rootRoute
    }
    '/manage': {
      preLoaderRoute: typeof ManageImport
      parentRoute: typeof rootRoute
    }
    '/reward': {
      preLoaderRoute: typeof RewardImport
      parentRoute: typeof rootRoute
    }
    '/term': {
      preLoaderRoute: typeof TermImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/auth/register': {
      preLoaderRoute: typeof AuthRegisterImport
      parentRoute: typeof rootRoute
    }
    '/product/$productId': {
      preLoaderRoute: typeof ProductProductIdImport
      parentRoute: typeof rootRoute
    }
    '/user/order': {
      preLoaderRoute: typeof UserOrderImport
      parentRoute: typeof rootRoute
    }
    '/manage/': {
      preLoaderRoute: typeof ManageIndexImport
      parentRoute: typeof ManageImport
    }
    '/product/': {
      preLoaderRoute: typeof ProductIndexImport
      parentRoute: typeof rootRoute
    }
    '/manage/product/add_desk': {
      preLoaderRoute: typeof ManageProductAdddeskImport
      parentRoute: typeof ManageImport
    }
    '/manage/product/scheduling_desk': {
      preLoaderRoute: typeof ManageProductSchedulingdeskImport
      parentRoute: typeof ManageImport
    }
    '/manage/product/view_desk/$orderId': {
      preLoaderRoute: typeof ManageProductViewdeskOrderIdImport
      parentRoute: typeof ManageImport
    }
    '/manage/product/view_desk/': {
      preLoaderRoute: typeof ManageProductViewdeskIndexImport
      parentRoute: typeof ManageImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexRoute,
  AboutRoute,
  CartRoute,
  DocumentRoute,
  ManageRoute.addChildren([
    ManageIndexRoute,
    ManageProductAdddeskRoute,
    ManageProductSchedulingdeskRoute,
    ManageProductViewdeskOrderIdRoute,
    ManageProductViewdeskIndexRoute,
  ]),
  RewardRoute,
  TermRoute,
  AuthLoginRoute,
  AuthRegisterRoute,
  ProductProductIdRoute,
  UserOrderRoute,
  ProductIndexRoute,
])
